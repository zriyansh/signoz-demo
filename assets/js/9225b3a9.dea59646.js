"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[446],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return g}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),p=l(t),g=r,d=p["".concat(c,".").concat(g)]||p[g]||u[g]||i;return t?o.createElement(d,s(s({ref:n},m),{},{components:t})):o.createElement(d,s({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=p;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var l=2;l<i;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5142:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),s=["components"],a={sidebar_position:4},c="Configuration Files",l={unversionedId:"config",id:"config",title:"Configuration Files",description:"These are the config files that you get when running a basi setup of SigNoz.",source:"@site/docs/config.md",sourceDirName:".",slug:"/config",permalink:"/signoz-demo/docs/config",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/config.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"SigNoz Features",permalink:"/signoz-demo/docs/features"},next:{title:"Versioning and Ports",permalink:"/signoz-demo/docs/version"}},m={},u=[],p={toc:u};function g(e){var n=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuration-files"},"Configuration Files"),(0,i.kt)("p",null,"These are the config files that you get when running a basi setup of SigNoz. "),(0,i.kt)("p",null,"These config files have been taken from a local instance of SigNoz running on a Apple M1 macOS system."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"we can write few lines about these config files as well, so that users find it easy to change these files as per their need, hence, less support will be needed."))),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="alertmanager.yml"',title:'"alertmanager.yml"'},"global:\n  resolve_timeout: 1m\n  slack_api_url: 'https://hooks.slack.com/services/xxx'\n\nroute:\n  receiver: 'slack-notifications'\n\nreceivers:\n- name: 'slack-notifications'\n  slack_configs:\n  - channel: '#alerts'\n    send_resolved: true\n    icon_url: https://avatars3.githubusercontent.com/u/3380462\n    title: |-\n     [{{ .Status | toUpper }}{{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}\n     {{- if gt (len .CommonLabels) (len .GroupLabels) -}}\n       {{\" \"}}(\n       {{- with .CommonLabels.Remove .GroupLabels.Names }}\n         {{- range $index, $label := .SortedPairs -}}\n           {{ if $index }}, {{ end }}\n           {{- $label.Name }}=\"{{ $label.Value -}}\"\n         {{- end }}\n       {{- end -}}\n       )\n     {{- end }}\n    text: >-\n     {{ range .Alerts -}}\n     *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}\n\n     *Description:* {{ .Annotations.description }}\n\n     *Details:*\n       {{ range .Labels.SortedPairs }} \u2022 *{{ .Name }}:* `{{ .Value }}`\n       {{ end }}\n     {{ end }}\n")),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="alerts.yml"',title:'"alerts.yml"'},'groups:\n- name: ExampleCPULoadGroup\n  rules:\n  - alert: HighCpuLoad\n    expr: system_cpu_load_average_1m > 0.1\n    for: 0m\n    labels:\n      severity: warning\n    annotations:\n      summary: High CPU load\n      description: "CPU load is > 0.1\\n  VALUE = {{ $value }}\\n  LABELS = {{ $labels }}"\n\n\n')),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="docker-compose.arm.yml"',title:'"docker-compose.arm.yml"'},'version: "2.4"\n\nservices:\n  clickhouse:\n    image: altinity/clickhouse-server:21.12.3.32.altinitydev.arm\n    # ports:\n    #   - "9000:9000"\n    #   - "8123:8123"\n    volumes:\n      - ./clickhouse-config.xml:/etc/clickhouse-server/config.xml\n      - ./data/clickhouse/:/var/lib/clickhouse/\n    restart: on-failure\n    logging:\n      options:\n        max-size: 50m\n        max-file: "3"\n    healthcheck:\n      # "clickhouse", "client", "-u ${CLICKHOUSE_USER}", "--password ${CLICKHOUSE_PASSWORD}", "-q \'SELECT 1\'"\n      test: ["CMD", "wget", "--spider", "-q", "localhost:8123/ping"]\n      interval: 30s\n      timeout: 5s\n      retries: 3\n\n  alertmanager:\n    image: signoz/alertmanager:0.6.1\n    volumes:\n      - ./data/alertmanager:/data\n    depends_on:\n      query-service:\n        condition: service_healthy\n    restart: on-failure\n    command:\n      - --queryService.url=http://query-service:8080\n      - --storage.path=/data\n\n  query-service:\n    image: signoz/query-service:0.7.5\n    container_name: query-service\n    command: ["-config=/root/config/prometheus.yml"]\n    volumes:\n      - ./prometheus.yml:/root/config/prometheus.yml\n      - ../dashboards:/root/config/dashboards\n      - ./data/signoz/:/var/lib/signoz/\n    environment:\n      - ClickHouseUrl=tcp://clickhouse:9000\n      - STORAGE=clickhouse\n      - GODEBUG=netdns=go\n      - TELEMETRY_ENABLED=true\n      - DEPLOYMENT_TYPE=docker-standalone-arm\n      \n    restart: on-failure\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "-q", "localhost:8080/api/v1/version"]\n      interval: 30s\n      timeout: 5s\n      retries: 3\n    depends_on:\n      clickhouse:\n        condition: service_healthy\n\n  frontend:\n    image: signoz/frontend:0.7.5\n    container_name: frontend\n    restart: on-failure\n    depends_on:\n      - alertmanager\n      - query-service\n    ports:\n      - "3301:3301"\n    volumes:\n      - ../common/nginx-config.conf:/etc/nginx/conf.d/default.conf\n\n  otel-collector:\n    image: signoz/otelcontribcol:0.43.0\n    command: ["--config=/etc/otel-collector-config.yaml"]\n    volumes:\n      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml\n    ports:\n      - "4317:4317"     # OTLP gRPC receiver\n      - "4318:4318"     # OTLP HTTP receiver\n      # - "8889:8889"     # Prometheus metrics exposed by the agent\n      # - "13133"         # health_check\n      # - "14268:14268"   # Jaeger receiver\n      # - "55678:55678"   # OpenCensus receiver\n      # - "55679:55679"   # zpages extension\n      # - "55680:55680"   # OTLP gRPC legacy receiver\n      # - "55681:55681"   # OTLP HTTP legacy receiver\n    mem_limit: 2000m\n    restart: on-failure\n    depends_on:\n      clickhouse:\n        condition: service_healthy\n\n  otel-collector-metrics:\n    image: signoz/otelcontribcol:0.43.0\n    command: ["--config=/etc/otel-collector-metrics-config.yaml"]\n    volumes:\n      - ./otel-collector-metrics-config.yaml:/etc/otel-collector-metrics-config.yaml\n    restart: on-failure\n    depends_on:\n      clickhouse:\n        condition: service_healthy\n\n  hotrod:\n    image: jaegertracing/example-hotrod:1.30\n    container_name: hotrod\n    logging:\n      options:\n        max-size: 50m\n        max-file: "3"\n    command: ["all"]\n    environment:\n      - JAEGER_ENDPOINT=http://otel-collector:14268/api/traces\n\n  load-hotrod:\n    image: "grubykarol/locust:1.2.3-python3.9-alpine3.12"\n    container_name: load-hotrod\n    hostname: load-hotrod\n    environment:\n      ATTACKED_HOST: http://hotrod:8080\n      LOCUST_MODE: standalone\n      NO_PROXY: standalone\n      TASK_DELAY_FROM: 5\n      TASK_DELAY_TO: 30\n      QUIET_MODE: "${QUIET_MODE:-false}"\n      LOCUST_OPTS: "--headless -u 10 -r 1"\n    volumes:\n      - ../common/locust-scripts:/locust\n\n')),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="docker-compose.yml"',title:'"docker-compose.yml"'},'version: "2.4"\n\nservices:\n  clickhouse:\n    image: yandex/clickhouse-server:21.12.3.32\n    # ports:\n    #   - "9000:9000"\n    #   - "8123:8123"\n    volumes:\n      - ./clickhouse-config.xml:/etc/clickhouse-server/config.xml\n      - ./data/clickhouse/:/var/lib/clickhouse/\n    restart: on-failure\n    logging:\n      options:\n        max-size: 50m\n        max-file: "3"\n    healthcheck:\n      # "clickhouse", "client", "-u ${CLICKHOUSE_USER}", "--password ${CLICKHOUSE_PASSWORD}", "-q \'SELECT 1\'"\n      test: ["CMD", "wget", "--spider", "-q", "localhost:8123/ping"]\n      interval: 30s\n      timeout: 5s\n      retries: 3\n\n  alertmanager:\n    image: signoz/alertmanager:0.6.1\n    volumes:\n      - ./data/alertmanager:/data\n    depends_on:\n      query-service:\n        condition: service_healthy\n    restart: on-failure\n    command:\n      - --queryService.url=http://query-service:8080\n      - --storage.path=/data\n\n# Notes for Maintainers/Contributors who will change Line Numbers of Frontend & Query-Section. Please Update Line Numbers in `./scripts/commentLinesForSetup.sh` & `./CONTRIBUTING.md`\n\n  query-service:\n    image: signoz/query-service:0.7.5\n    container_name: query-service\n    command: ["-config=/root/config/prometheus.yml"]\n    volumes:\n      - ./prometheus.yml:/root/config/prometheus.yml\n      - ../dashboards:/root/config/dashboards\n      - ./data/signoz/:/var/lib/signoz/\n    environment:\n      - ClickHouseUrl=tcp://clickhouse:9000\n      - STORAGE=clickhouse\n      - GODEBUG=netdns=go\n      - TELEMETRY_ENABLED=true\n      - DEPLOYMENT_TYPE=docker-standalone-amd\n    restart: on-failure\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "-q", "localhost:8080/api/v1/version"]\n      interval: 30s\n      timeout: 5s\n      retries: 3\n    depends_on:\n      clickhouse:\n        condition: service_healthy\n\n  frontend:\n    image: signoz/frontend:0.7.5\n    container_name: frontend\n    restart: on-failure\n    depends_on:\n      - alertmanager\n      - query-service\n    ports:\n      - "3301:3301"\n    volumes:\n      - ../common/nginx-config.conf:/etc/nginx/conf.d/default.conf\n\n  otel-collector:\n    image: signoz/otelcontribcol:0.43.0\n    command: ["--config=/etc/otel-collector-config.yaml"]\n    volumes:\n      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml\n    ports:\n      - "4317:4317"     # OTLP gRPC receiver\n      - "4318:4318"     # OTLP HTTP receiver\n      # - "8889:8889"     # Prometheus metrics exposed by the agent\n      # - "13133"         # health_check\n      # - "14268:14268"   # Jaeger receiver\n      # - "55678:55678"   # OpenCensus receiver\n      # - "55679:55679"   # zpages extension\n      # - "55680:55680"   # OTLP gRPC legacy receiver\n      # - "55681:55681"   # OTLP HTTP legacy receiver\n    mem_limit: 2000m\n    restart: on-failure\n    depends_on:\n      clickhouse:\n        condition: service_healthy\n\n  otel-collector-metrics:\n    image: signoz/otelcontribcol:0.43.0\n    command: ["--config=/etc/otel-collector-metrics-config.yaml"]\n    volumes:\n      - ./otel-collector-metrics-config.yaml:/etc/otel-collector-metrics-config.yaml\n    restart: on-failure\n    depends_on:\n      clickhouse:\n        condition: service_healthy\n\n  hotrod:\n    image: jaegertracing/example-hotrod:1.30\n    container_name: hotrod\n    logging:\n      options:\n        max-size: 50m\n        max-file: "3"\n    command: ["all"]\n    environment:\n      - JAEGER_ENDPOINT=http://otel-collector:14268/api/traces\n\n  load-hotrod:\n    image: "grubykarol/locust:1.2.3-python3.9-alpine3.12"\n    container_name: load-hotrod\n    hostname: load-hotrod\n    environment:\n      ATTACKED_HOST: http://hotrod:8080\n      LOCUST_MODE: standalone\n      NO_PROXY: standalone\n      TASK_DELAY_FROM: 5\n      TASK_DELAY_TO: 30\n      QUIET_MODE: "${QUIET_MODE:-false}"\n      LOCUST_OPTS: "--headless -u 10 -r 1"\n    volumes:\n      - ../common/locust-scripts:/locust\n"\n\n')),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="otel-collector-config.yml"',title:'"otel-collector-config.yml"'},'\nreceivers:\n  otlp/spanmetrics:\n    protocols:\n      grpc:\n        endpoint: "localhost:12345"\n  otlp:\n    protocols:\n      grpc:\n      http:\n  jaeger:\n    protocols:\n      grpc:\n      thrift_http:\n  hostmetrics:\n    collection_interval: 30s\n    scrapers:\n      cpu:\n      load:\n      memory:\n      disk:\n      filesystem:\n      network:\nprocessors:\n  batch:\n    send_batch_size: 1000\n    timeout: 10s\n  signozspanmetrics/prometheus:\n    metrics_exporter: prometheus\n    latency_histogram_buckets: [100us, 1ms, 2ms, 6ms, 10ms, 50ms, 100ms, 250ms, 500ms, 1000ms, 1400ms, 2000ms, 5s, 10s, 20s, 40s, 60s ]\n    dimensions_cache_size: 10000\n  # memory_limiter:\n  #   # 80% of maximum memory up to 2G\n  #   limit_mib: 1500\n  #   # 25% of limit up to 2G\n  #   spike_limit_mib: 512\n  #   check_interval: 5s\n  #\n  #   # 50% of the maximum memory\n  #   limit_percentage: 50\n  #   # 20% of max memory usage spike expected\n  #   spike_limit_percentage: 20\n  # queued_retry:\n  #   num_workers: 4\n  #   queue_size: 100\n  #   retry_on_failure: true\nextensions:\n  health_check: {}\n  zpages: {}\nexporters:\n  clickhouse:\n    datasource: tcp://clickhouse:9000\n  clickhousemetricswrite:\n    endpoint: tcp://clickhouse:9000/?database=signoz_metrics\n    resource_to_telemetry_conversion:\n      enabled: true\n  prometheus:\n    endpoint: "0.0.0.0:8889"\nservice:\n  extensions: [health_check, zpages]\n  pipelines:\n    traces:\n      receivers: [jaeger, otlp]\n      processors: [signozspanmetrics/prometheus, batch]\n      exporters: [clickhouse]\n    metrics:\n      receivers: [otlp, hostmetrics]\n      processors: [batch]\n      exporters: [clickhousemetricswrite]\n    metrics/spanmetrics:\n      receivers: [otlp/spanmetrics]\n      exporters: [prometheus]\n')),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="otel-collector-metrics-config.yml"',title:'"otel-collector-metrics-config.yml"'},'receivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\n  # Data sources: metrics\n  prometheus:\n    config:\n      scrape_configs:\n        - job_name: "otel-collector"\n          scrape_interval: 30s\n          static_configs:\n            - targets: ["otel-collector:8889"]\nprocessors:\n  batch:\n    send_batch_size: 1000\n    timeout: 10s\n  # memory_limiter:\n  #   # 80% of maximum memory up to 2G\n  #   limit_mib: 1500\n  #   # 25% of limit up to 2G\n  #   spike_limit_mib: 512\n  #   check_interval: 5s\n  #\n  #   # 50% of the maximum memory\n  #   limit_percentage: 50\n  #   # 20% of max memory usage spike expected\n  #   spike_limit_percentage: 20\n  # queued_retry:\n  #   num_workers: 4\n  #   queue_size: 100\n  #   retry_on_failure: true\nextensions:\n  health_check: {}\n  zpages: {}\nexporters:\n  clickhousemetricswrite:\n    endpoint: tcp://clickhouse:9000/?database=signoz_metrics\n\nservice:\n  extensions: [health_check, zpages]\n  pipelines:\n    metrics:\n      receivers: [otlp, prometheus]\n      processors: [batch]\n      exporters: [clickhousemetricswrite]\n')),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="prometheus.yml"',title:'"prometheus.yml"'},"\n# my global config\nglobal:\n  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\n  # scrape_timeout is set to the global default (10s).\n\n# Alertmanager configuration\nalerting:\n  alertmanagers:\n  - static_configs:\n    - targets:\n      - alertmanager:9093\n\n# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.\nrule_files:\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n  - 'alerts.yml'\n\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n  \n\nremote_read:\n  - url: tcp://clickhouse:9000/?database=signoz_metrics\n\n")),(0,i.kt)("br",null))}g.isMDXComponent=!0}}]);